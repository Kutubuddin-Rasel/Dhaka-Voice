---
description: "Production-grade frontend development rule - Always create industrial, professional, and user-friendly interfaces with full backend integration awareness"
globs: ["**/*.{js,jsx,ts,tsx,vue,svelte,css,scss,sass,less,html}"]
alwaysApply: true
---

# FRONTEND PRODUCTION STANDARDS

## Core Philosophy
- ALWAYS create production-ready, industrial-grade applications
- Every component must be professional, polished, and enterprise-quality
- User experience is paramount - smooth, intuitive, and accessibility-first
- Performance and scalability are non-negotiable requirements

## Backend Integration Requirements
- MUST analyze and understand the existing backend codebase before any frontend decisions
- Always check API endpoints, data structures, and authentication patterns
- Ensure frontend state management aligns with backend data flow
- Implement proper error handling for all API interactions
- Follow the established backend patterns for consistency

## Design & UX Standards
- Use modern, clean, and minimalist design principles
- Implement consistent spacing, typography, and color schemes
- Ensure responsive design works flawlessly across all devices (mobile-first approach)
- Add smooth animations and micro-interactions (60fps target)
- Follow accessibility guidelines (WCAG 2.1 AA minimum)
- Use loading states, skeleton screens, and proper feedback mechanisms

## Technical Requirements
- Write TypeScript with strict type checking enabled
- Implement proper error boundaries and fallback UI
- Use modern CSS features (Grid, Flexbox, Custom Properties)
- Optimize for Core Web Vitals (LCP, FID, CLS)
- Implement code splitting and lazy loading where appropriate
- Follow component composition patterns over inheritance

## Code Quality Standards
- Use semantic HTML and proper ARIA labels
- Implement comprehensive error handling and user feedback
- Write clean, self-documenting code with proper comments
- Follow consistent naming conventions throughout the project
- Ensure all interactive elements have proper focus states
- Validate all forms with clear, helpful error messages

## Performance Optimization
- Optimize images and assets (WebP, lazy loading, proper sizing)
- Minimize bundle size and implement tree shaking
- Use proper caching strategies for API calls and static assets
- Implement virtual scrolling for large lists
- Avoid unnecessary re-renders and optimize React/Vue performance
- Use proper memoization techniques

## State Management
- Choose appropriate state management (Context, Zustand, Redux) based on app complexity
- Keep state minimal and derive computed values when possible
- Implement proper loading and error states for all async operations
- Use optimistic updates where appropriate for better UX
- Maintain consistent data flow patterns

## Professional Polish
- Add proper loading animations and transitions
- Implement keyboard navigation and shortcuts
- Use consistent iconography and visual language
- Add proper empty states and 404 pages
- Implement proper breadcrumbs and navigation patterns
- Add contextual help and tooltips where needed

## Testing & Quality Assurance
- Write unit tests for critical business logic
- Test components in isolation and integration scenarios
- Ensure cross-browser compatibility
- Test with screen readers and keyboard-only navigation
- Validate with different network conditions and device capabilities

## Security Considerations
- Sanitize all user inputs and prevent XSS attacks
- Implement proper authentication state management
- Use secure communication with backend (HTTPS, proper headers)
- Avoid exposing sensitive information in client-side code
- Implement proper session handling and token management

## Deployment Ready Features
- Environment-specific configuration management
- Proper error reporting and monitoring integration
- SEO optimization (meta tags, structured data, sitemap)
- Progressive Web App features where applicable
- Proper caching headers and service worker implementation

## Always Ask These Questions
1. How does this integrate with the existing backend architecture?
2. Is this component reusable and maintainable?
3. Does this provide excellent user experience on all devices?
4. Is the performance impact acceptable?
5. Does this follow our established design system?
6. Is this accessible to users with disabilities?
7. How will this handle error states and edge cases?
8. Is this secure and following best practices?

## Never Compromise On
- User experience and accessibility
- Performance and optimization
- Code quality and maintainability
- Security and data protection
- Cross-browser compatibility
- Mobile responsiveness
- Professional appearance and polish

Remember: Every line of code should contribute to creating a world-class, industrial-grade application that users love and developers are proud to maintain.